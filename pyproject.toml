# rasa-calm-cookbook/pyproject.toml (root project)
[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[project]
name = "rasa-calm-cookbook"
version = "0.1.0"
description = "A comprehensive collection of recipes for building conversational AI assistants with Rasa CALM"
readme = "README.md"
requires-python = ">=3.10,<3.12"
license = { text = "AGPL-3.0" }
authors = [
    { name = "Rasa Community", email = "community@rasa.com" }
]
keywords = ["rasa", "conversational-ai", "calm", "chatbot", "nlp", "llm"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# Core dependencies shared across all recipes
dependencies = [
    "rasa-pro>=3.8.0",
    "rasa-sdk>=3.8.0",
]

# Development and testing dependencies
[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "isort>=5.12.0",
    "black>=23.0.0",
    "pre-commit>=3.0.0",
]

# LLM provider dependencies
openai = [
    "openai>=1.0.0",
]

azure = [
    "azure-cognitiveservices-speech>=1.30.0",
    "azure-storage-blob>=12.14.0",
]

voice = [
    "speechrecognition>=3.10.0",
    "pydub>=0.25.0",
    "pyaudio>=0.2.11",
]

search = [
    "faiss-cpu>=1.7.0",
    "qdrant-client>=1.7.0",
    "pymilvus>=2.3.0",
    "sentence-transformers>=2.2.0",
]

deployment = [
    "docker>=6.0.0",
    "kubernetes>=18.20.0",
    "redis>=4.5.0",
    "psycopg2-binary>=2.9.0",
]

# Meta-packages for common combinations
basic = ["rasa-calm-cookbook[openai]"]
intermediate = ["rasa-calm-cookbook[openai,voice,search]"]
advanced = ["rasa-calm-cookbook[openai,azure,voice,search,deployment]"]
all = ["rasa-calm-cookbook[openai,azure,voice,search,deployment,dev]"]

[project.urls]
"Homepage" = "https://github.com/rodriveraai/rasa-calm-cookbook"
"Documentation" = "https://github.com/rodriveraai/rasa-calm-cookbook/docs"
"Repository" = "https://github.com/rodriveraai/rasa-calm-cookbook"
"Bug Tracker" = "https://github.com/rodriveraai/rasa-calm-cookbook/issues"
"Discussions" = "https://github.com/rodriveraai/rasa-calm-cookbook/discussions"

# Build configuration - FIX: Specify what to include in the package (recipes collection)
[tool.hatch.build.targets.wheel]
include = ["recipes"]
artifacts = ["recipes/**/*"]

[tool.hatch.build]
exclude = [
    "/.github",
    "/.venv",
    "/.mypy_cache",
    "/.pytest_cache",
    "/.ruff_cache",
    "/docs/_build",
    "**/__pycache__",
    "**/*.pyc",
    "**/*.pyo",
    "**/*.pyd",
    "**/models/*",
    "**/logs/*",
]

# Tool configurations shared across all recipes
[tool.ruff]
line-length = 88
target-version = "py310"
exclude = [
    ".venv",
    "models",
    "logs",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "A",   # flake8-builtins
]

[tool.ruff.lint.per-file-ignores]
"**/tests/**/*.py" = ["S101", "ANN"]  # Disable assert and annotation warnings in tests
"**/actions/**/*.py" = ["ANN"]  # Disable annotation warnings in actions

[tool.black]
line-length = 88
target-version = ["py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.venv
    | models
    | logs
)/
'''

[tool.mypy]
python_version = "3.10"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
exclude = [
    "^models/",
    "^logs/",
    "^\\.venv/",
]

[tool.pytest.ini_options]
testpaths = ["recipes"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--disable-warnings",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "requires_api_key: marks tests that require API keys",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["recipes"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/models/*",
    "*/logs/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip = [".venv", "models", "logs"]